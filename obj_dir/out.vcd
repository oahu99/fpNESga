$version Generated by VerilatedVcd $end
$date Sun Oct 20 22:11:12 2019
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  8 >" BLUE [7:0] $end
  $var wire  1 J" Draw_enable $end
  $var wire  8 =" GREEN [7:0] $end
  $var wire  8 <" RED [7:0] $end
  $var wire  1 B" VGA_BLANK_N $end
  $var wire  1 ?" VGA_CLK $end
  $var wire  1 @" VGA_HS $end
  $var wire  1 C" VGA_SYNC_N $end
  $var wire  1 A" VGA_VS $end
  $var wire  1 8" clk_50 $end
  $var wire  8 E" multiplier [7:0] $end
  $var wire  8 F" multiplier_two [7:0] $end
  $var wire  1 ;" nmi_interrupt $end
  $var wire  1 G" nt_bit $end
  $var wire  1 9" ready_in $end
  $var wire  1 :" reset_al $end
  $var wire  1 H" scl $end
  $var wire  1 I" sda $end
  $var wire  1 D" vga_reset $end
  $scope module NES $end
   $var wire  8 >" BLUE [7:0] $end
   $var wire  1 M" C $end
   $var wire  1 J" Draw_enable $end
   $var wire  8 =" GREEN [7:0] $end
   $var wire  1 O" OAM_en $end
   $var wire 16 "" PPUSCROLL [15:0] $end
   $var wire  8 <" RED [7:0] $end
   $var wire  1 Z RWE $end
   $var wire  1 U Ready $end
   $var wire  1 B" VGA_BLANK_N $end
   $var wire  1 ?" VGA_CLK $end
   $var wire  1 @" VGA_HS $end
   $var wire  1 C" VGA_SYNC_N $end
   $var wire  1 A" VGA_VS $end
   $var wire 16 { address [15:0] $end
   $var wire 16 y address_cpu [15:0] $end
   $var wire  1 8" clk_50 $end
   $var wire  8 | data_in [7:0] $end
   $var wire  8 x data_in_cpu [7:0] $end
   $var wire  8 P data_out [7:0] $end
   $var wire  8 3! data_out_mem [7:0] $end
   $var wire  8 r! data_out_ppu [7:0] $end
   $var wire  8 S" hold [7:0] $end
   $var wire  1 N" irq_reset $end
   $var wire  8 E" multiplier [7:0] $end
   $var wire  8 F" multiplier_two [7:0] $end
   $var wire  1 ;" nmi_interrupt $end
   $var wire  1 G" nt_bit $end
   $var wire 16 R" oam_fetch_address_q [15:0] $end
   $var wire 16 7! pc [15:0] $end
   $var wire  1 4! ppu_rwe $end
   $var wire 16 P" r_address [15:0] $end
   $var wire  1 9" ready_in $end
   $var wire  1 L" res_interrupt $end
   $var wire  1 :" reset_al $end
   $var wire  1 H" scl $end
   $var wire  1 I" sda $end
   $var wire  1 D" vga_reset $end
   $var wire 16 Q" w_address [15:0] $end
   $scope module CPU0 $end
    $var wire  8 S! A [7:0] $end
    $var wire 16 y AB [15:0] $end
    $var wire  8 >! ABH [7:0] $end
    $var wire  8 =! ABL [7:0] $end
    $var wire  6 n# ABS0 [5:0] $end
    $var wire  6 o# ABS1 [5:0] $end
    $var wire  6 p# ABSX0 [5:0] $end
    $var wire  6 q# ABSX1 [5:0] $end
    $var wire  6 r# ABSX2 [5:0] $end
    $var wire  8 -" ADD [7:0] $end
    $var wire  4 _! ADJH [3:0] $end
    $var wire  4 [! ADJL [3:0] $end
    $var wire  8 z AI [7:0] $end
    $var wire  1 X! AN $end
    $var wire  1 Y! AV $end
    $var wire  8 O! AXYS(0) [7:0] $end
    $var wire  8 P! AXYS(1) [7:0] $end
    $var wire  8 Q! AXYS(2) [7:0] $end
    $var wire  8 R! AXYS(3) [7:0] $end
    $var wire  1 ." AZ $end
    $var wire  8 v BI [7:0] $end
    $var wire  6 s# BRA0 [5:0] $end
    $var wire  6 t# BRA1 [5:0] $end
    $var wire  6 u# BRA2 [5:0] $end
    $var wire  6 v# BRK0 [5:0] $end
    $var wire  6 w# BRK1 [5:0] $end
    $var wire  6 x# BRK2 [5:0] $end
    $var wire  6 y# BRK3 [5:0] $end
    $var wire  1 I C $end
    $var wire  1 o CI $end
    $var wire  1 ^! CO $end
    $var wire  1 M D $end
    $var wire  6 z# DECODE [5:0] $end
    $var wire  8 P DI [7:0] $end
    $var wire  8 D! DIHOLD [7:0] $end
    $var wire  1 b# DIHOLD_valid $end
    $var wire  8 r DIMUX [7:0] $end
    $var wire  8 x DO [7:0] $end
    $var wire  6 {# FETCH [5:0] $end
    $var wire  1 Z! HC $end
    $var wire  1 E I $end
    $var wire  6 |# INDX0 [5:0] $end
    $var wire  6 }# INDX1 [5:0] $end
    $var wire  6 ~# INDX2 [5:0] $end
    $var wire  6 !$ INDX3 [5:0] $end
    $var wire  6 "$ INDY0 [5:0] $end
    $var wire  6 #$ INDY1 [5:0] $end
    $var wire  6 $$ INDY2 [5:0] $end
    $var wire  6 %$ INDY3 [5:0] $end
    $var wire  8 t IR [7:0] $end
    $var wire  8 H! IRHOLD [7:0] $end
    $var wire  1 :! IRHOLD_valid $end
    $var wire  1 N" IRQ $end
    $var wire  6 &$ JMP0 [5:0] $end
    $var wire  6 '$ JMP1 [5:0] $end
    $var wire  6 ($ JMPI0 [5:0] $end
    $var wire  6 )$ JMPI1 [5:0] $end
    $var wire  6 *$ JSR0 [5:0] $end
    $var wire  6 +$ JSR1 [5:0] $end
    $var wire  6 ,$ JSR2 [5:0] $end
    $var wire  6 -$ JSR3 [5:0] $end
    $var wire  1 G N $end
    $var wire  1 ;" NMI $end
    $var wire  1 L NMI_1 $end
    $var wire  1 D NMI_edge $end
    $var wire  4 m# OP_A [3:0] $end
    $var wire  4 j# OP_ADD [3:0] $end
    $var wire  4 h# OP_AND [3:0] $end
    $var wire  4 i# OP_EOR [3:0] $end
    $var wire  4 g# OP_OR [3:0] $end
    $var wire  4 l# OP_ROL [3:0] $end
    $var wire  4 k# OP_SUB [3:0] $end
    $var wire  8 O P [7:0] $end
    $var wire 16 7! PC [15:0] $end
    $var wire  8 8! PCH [7:0] $end
    $var wire  8 9! PCL [7:0] $end
    $var wire  1 i PC_inc $end
    $var wire 16 u PC_temp [15:0] $end
    $var wire  6 .$ PULL0 [5:0] $end
    $var wire  6 /$ PULL1 [5:0] $end
    $var wire  6 0$ PULL2 [5:0] $end
    $var wire  6 1$ PUSH0 [5:0] $end
    $var wire  6 2$ PUSH1 [5:0] $end
    $var wire  1 U RDY $end
    $var wire  6 3$ READ [5:0] $end
    $var wire  6 4$ REG [5:0] $end
    $var wire  6 5$ RTI0 [5:0] $end
    $var wire  6 6$ RTI1 [5:0] $end
    $var wire  6 7$ RTI2 [5:0] $end
    $var wire  6 8$ RTI3 [5:0] $end
    $var wire  6 9$ RTI4 [5:0] $end
    $var wire  6 :$ RTS0 [5:0] $end
    $var wire  6 ;$ RTS1 [5:0] $end
    $var wire  6 <$ RTS2 [5:0] $end
    $var wire  6 =$ RTS3 [5:0] $end
    $var wire  8 V! S [7:0] $end
    $var wire  2 c# SEL_A [1:0] $end
    $var wire  2 d# SEL_S [1:0] $end
    $var wire  2 e# SEL_X [1:0] $end
    $var wire  2 f# SEL_Y [1:0] $end
    $var wire  8 C$ STACKPAGE [7:0] $end
    $var wire  1 H V $end
    $var wire  1 Z WE $end
    $var wire  6 >$ WRITE [5:0] $end
    $var wire  8 T! X [7:0] $end
    $var wire  8 U! Y [7:0] $end
    $var wire  1 F Z $end
    $var wire  8 B$ ZEROPAGE [7:0] $end
    $var wire  6 ?$ ZP0 [5:0] $end
    $var wire  6 @$ ZPX0 [5:0] $end
    $var wire  6 A$ ZPX1 [5:0] $end
    $var wire  1 m! adc_bcd $end
    $var wire  1 t! adc_sbc $end
    $var wire  1 l! adj_bcd $end
    $var wire  4 p alu_op [3:0] $end
    $var wire  1 m alu_shift_right $end
    $var wire  1 `! backwards $end
    $var wire  1 b! bit_ins $end
    $var wire  1 ;! brk $end
    $var wire  1 e! clc $end
    $var wire  1 /" cld $end
    $var wire  1 c! cli $end
    $var wire  1 8" clk $end
    $var wire  1 g! clv $end
    $var wire  1 k! compare $end
    $var wire  3 5! cond_code [2:0] $end
    $var wire  1 K cond_true $end
    $var wire  2 E! dst_reg [1:0] $end
    $var wire  1 @! inc $end
    $var wire  1 G! index_y $end
    $var wire  1 C! load_only $end
    $var wire  1 i! load_reg $end
    $var wire  4 B! op [3:0] $end
    $var wire  1 <! php $end
    $var wire  1 1" plp $end
    $var wire  8 w regfile [7:0] $end
    $var wire  2 q regsel [1:0] $end
    $var wire  1 6! res $end
    $var wire  1 J reset $end
    $var wire  1 A! rotate $end
    $var wire  1 d! sec $end
    $var wire  1 0" sed $end
    $var wire  1 f! sei $end
    $var wire  1 j! shift $end
    $var wire  1 ?! shift_right $end
    $var wire  2 F! src_reg [1:0] $end
    $var wire  6 6" state [5:0] $end
    $var wire  1 h! store $end
    $var wire  1 a! write_back $end
    $var wire  1 [ write_register $end
    $scope module ALU $end
     $var wire  8 z AI [7:0] $end
     $var wire  1 ]! AI7 $end
     $var wire  1 j BCD $end
     $var wire  8 v BI [7:0] $end
     $var wire  1 \! BI7 $end
     $var wire  1 o CI $end
     $var wire  1 ^! CO $end
     $var wire  1 l CO9 $end
     $var wire  1 Z! HC $end
     $var wire  1 k HC9 $end
     $var wire  1 X! N $end
     $var wire  8 -" OUT [7:0] $end
     $var wire  1 U RDY $end
     $var wire  1 Y! V $end
     $var wire  1 ." Z $end
     $var wire  1 n adder_CI $end
     $var wire  1 8" clk $end
     $var wire  4 p op [3:0] $end
     $var wire  1 m right $end
     $var wire  9 $! temp [8:0] $end
     $var wire  8 ~ temp_BI [7:0] $end
     $var wire  1 "! temp_HC $end
     $var wire  5 #! temp_h [4:0] $end
     $var wire  5 !! temp_l [4:0] $end
     $var wire  9 } temp_logic [8:0] $end
    $upscope $end
   $upscope $end
   $scope module MEM0 $end
    $var wire  1 Z RWE $end
    $var wire 16 { address [15:0] $end
    $var wire  1 8" clk $end
    $var wire  8 | data_in [7:0] $end
    $var wire  8 3! data_out_mem [7:0] $end
   $upscope $end
   $scope module PPU0 $end
    $var wire  8 >" BLUE [7:0] $end
    $var wire  8 -! BLUE_bg [7:0] $end
    $var wire  8 ^" BLUE_sp [7:0] $end
    $var wire  1 X" CLK_COUNTER $end
    $var wire 10 5" DrawX [9:0] $end
    $var wire 10 |! DrawY [9:0] $end
    $var wire  1 J" Draw_enable $end
    $var wire  8 =" GREEN [7:0] $end
    $var wire  8 /! GREEN_bg [7:0] $end
    $var wire  8 ]" GREEN_sp [7:0] $end
    $var wire  8 (" OAMADDR [7:0] $end
    $var wire  8 +" OAMDATA [7:0] $end
    $var wire  8 _" OAMDMA [7:0] $end
    $var wire  1 O" OAM_en $end
    $var wire 16 !" PPUADDR [15:0] $end
    $var wire  8 *" PPUCTRL [7:0] $end
    $var wire  8 ,! PPUDATA [7:0] $end
    $var wire  8 )" PPUMASK [7:0] $end
    $var wire 16 "" PPUSCROLL [15:0] $end
    $var wire  8 #" PPUSTATUS [7:0] $end
    $var wire  1 %" PPU_ADDR_FLAG $end
    $var wire  1 $" PPU_SCROLL_FLAG $end
    $var wire  8 <" RED [7:0] $end
    $var wire  8 .! RED_bg [7:0] $end
    $var wire  8 \" RED_sp [7:0] $end
    $var wire  1 Z RWE $end
    $var wire  1 ?" VGA_CLK $end
    $var wire  1 @" VGA_HS $end
    $var wire  1 A" VGA_VS $end
    $var wire 16 e" address_to_vram [15:0] $end
    $var wire  1 8" clk $end
    $var wire  8 T" color_code [7:0] $end
    $var wire  8 U" color_code_bg [7:0] $end
    $var wire  8 V" color_code_spr [7:0] $end
    $var wire 16 y cpu_addr [15:0] $end
    $var wire  8 | data_in [7:0] $end
    $var wire  8 `" data_out_oam [7:0] $end
    $var wire  8 r! data_out_ppu [7:0] $end
    $var wire  8 W! mem_data_in [7:0] $end
    $var wire  8 ," mem_data_out [7:0] $end
    $var wire  8 Y" mem_data_out_d [7:0] $end
    $var wire  8 E" multiplier [7:0] $end
    $var wire  8 F" multiplier_two [7:0] $end
    $var wire  1 ;" nmi_interrupt $end
    $var wire  1 G" nt_bit $end
    $var wire 16 R" oam_fetch_address_q [15:0] $end
    $var wire  8 # palette_ram(0) [7:0] $end
    $var wire  8 $ palette_ram(1) [7:0] $end
    $var wire  8 - palette_ram(10) [7:0] $end
    $var wire  8 . palette_ram(11) [7:0] $end
    $var wire  8 / palette_ram(12) [7:0] $end
    $var wire  8 0 palette_ram(13) [7:0] $end
    $var wire  8 1 palette_ram(14) [7:0] $end
    $var wire  8 2 palette_ram(15) [7:0] $end
    $var wire  8 3 palette_ram(16) [7:0] $end
    $var wire  8 4 palette_ram(17) [7:0] $end
    $var wire  8 5 palette_ram(18) [7:0] $end
    $var wire  8 6 palette_ram(19) [7:0] $end
    $var wire  8 % palette_ram(2) [7:0] $end
    $var wire  8 7 palette_ram(20) [7:0] $end
    $var wire  8 8 palette_ram(21) [7:0] $end
    $var wire  8 9 palette_ram(22) [7:0] $end
    $var wire  8 : palette_ram(23) [7:0] $end
    $var wire  8 ; palette_ram(24) [7:0] $end
    $var wire  8 < palette_ram(25) [7:0] $end
    $var wire  8 = palette_ram(26) [7:0] $end
    $var wire  8 > palette_ram(27) [7:0] $end
    $var wire  8 ? palette_ram(28) [7:0] $end
    $var wire  8 @ palette_ram(29) [7:0] $end
    $var wire  8 & palette_ram(3) [7:0] $end
    $var wire  8 A palette_ram(30) [7:0] $end
    $var wire  8 B palette_ram(31) [7:0] $end
    $var wire  8 ' palette_ram(4) [7:0] $end
    $var wire  8 ( palette_ram(5) [7:0] $end
    $var wire  8 ) palette_ram(6) [7:0] $end
    $var wire  8 * palette_ram(7) [7:0] $end
    $var wire  8 + palette_ram(8) [7:0] $end
    $var wire  8 , palette_ram(9) [7:0] $end
    $var wire 16 X ppu_bg_r_address [15:0] $end
    $var wire  1 S ppu_mem_rwe $end
    $var wire 16 T ppu_ppu_r_address [15:0] $end
    $var wire 16 R ppu_r_address [15:0] $end
    $var wire  1 C ppu_read $end
    $var wire 16 3" ppu_reg_r_address [15:0] $end
    $var wire 16 s! ppu_w_address [15:0] $end
    $var wire  1 f" priority_bit $end
    $var wire  1 K" reset $end
    $var wire  1 H" scl $end
    $var wire  1 I" sda $end
    $var wire 16 Z" sprite_address [15:0] $end
    $var wire 16 d" sprite_address_d [15:0] $end
    $var wire 16 c" sprite_address_q [15:0] $end
    $var wire  4 W" sprite_counter [3:0] $end
    $var wire  8 a" sprite_data_in [7:0] $end
    $var wire  1 b" sprite_mem_access $end
    $var wire  1 4" vblank $end
    $var wire  1 D" vga_reset $end
    $var wire  1 [" vga_vblank $end
    $scope module BG0 $end
     $var wire  1 Y ALE $end
     $var wire  8 -! BLUE [7:0] $end
     $var wire 10 5" DrawX [9:0] $end
     $var wire 10 |! DrawY [9:0] $end
     $var wire  8 /! GREEN [7:0] $end
     $var wire 15 x! LoopyT [14:0] $end
     $var wire  1 M! LoopyT_Next $end
     $var wire 15 }! LoopyV [14:0] $end
     $var wire 15 U# LoopyV_temp [14:0] $end
     $var wire 15 V# LoopyV_temp_two [14:0] $end
     $var wire  8 *" PPUCTRL [7:0] $end
     $var wire 16 "" PPUSCROLL [15:0] $end
     $var wire  1 %" PPU_ADDR_FLAG $end
     $var wire  1 $" PPU_SCROLL_FLAG $end
     $var wire  8 .! RED [7:0] $end
     $var wire  1 Z RWE $end
     $var wire  1 ?" VGA_CLK $end
     $var wire 16 h at_address [15:0] $end
     $var wire 16 \# at_base [15:0] $end
     $var wire 16 S# at_scroll_address [15:0] $end
     $var wire  2 )! attribute_bottom_left [1:0] $end
     $var wire  2 +! attribute_bottom_right [1:0] $end
     $var wire  8 '! attribute_data_curr [7:0] $end
     $var wire  8 0! attribute_data_next [7:0] $end
     $var wire  2 (! attribute_top_left [1:0] $end
     $var wire  2 *! attribute_top_right [1:0] $end
     $var wire  8 K# bg_palette_ram_separated(0) [7:0] $end
     $var wire  8 L# bg_palette_ram_separated(1) [7:0] $end
     $var wire  8 M# bg_palette_ram_separated(2) [7:0] $end
     $var wire  8 N# bg_palette_ram_separated(3) [7:0] $end
     $var wire  2 \ bitmap(0) [1:0] $end
     $var wire  2 ] bitmap(1) [1:0] $end
     $var wire  2 ^ bitmap(2) [1:0] $end
     $var wire  2 _ bitmap(3) [1:0] $end
     $var wire  2 ` bitmap(4) [1:0] $end
     $var wire  2 a bitmap(5) [1:0] $end
     $var wire  2 b bitmap(6) [1:0] $end
     $var wire  2 c bitmap(7) [1:0] $end
     $var wire  3 d bitmap_index [2:0] $end
     $var wire 16 ?# bitmap_one_address [15:0] $end
     $var wire 16 @# bitmap_two_address [15:0] $end
     $var wire 11 J# bitmap_vertical_index [10:0] $end
     $var wire  1 R# bottom $end
     $var wire  1 8" clk $end
     $var wire  8 `# coarse_x [7:0] $end
     $var wire  8 U" color_code [7:0] $end
     $var wire 16 y cpu_addr [15:0] $end
     $var wire 16 ]# curr_at [15:0] $end
     $var wire 16 Z# curr_nt [15:0] $end
     $var wire  2 e current_px [1:0] $end
     $var wire  8 | data_in [7:0] $end
     $var wire  4 A# fetch_phase [3:0] $end
     $var wire  4 B# fetch_phase_next [3:0] $end
     $var wire  3 2! fine_x [2:0] $end
     $var wire  3 W# fine_y [2:0] $end
     $var wire 10 =# horiz_counter [9:0] $end
     $var wire  1 P# left $end
     $var wire  1 u! loopy_latch $end
     $var wire  3 2! loopy_x [2:0] $end
     $var wire  8 ," mem_data_out [7:0] $end
     $var wire  1 W mem_fetch $end
     $var wire  8 E" multiplier [7:0] $end
     $var wire  8 F" multiplier_two [7:0] $end
     $var wire  8 &! nametable_byte_curr [7:0] $end
     $var wire  8 1! nametable_byte_next [7:0] $end
     $var wire 16 ^# next_at [15:0] $end
     $var wire 16 [# next_nt [15:0] $end
     $var wire  8 _# next_table [7:0] $end
     $var wire 16 f nt_address [15:0] $end
     $var wire 16 Y# nt_base [15:0] $end
     $var wire  1 G" nt_bit $end
     $var wire 16 T# nt_scroll_address [15:0] $end
     $var wire  8 X# offset [7:0] $end
     $var wire  6 H# palette_fetch_counter [5:0] $end
     $var wire  1 I# palette_fetch_enable $end
     $var wire 16 G# palette_mem_address [15:0] $end
     $var wire  8 {" palette_ram(0) [7:0] $end
     $var wire  8 |" palette_ram(1) [7:0] $end
     $var wire  8 '# palette_ram(10) [7:0] $end
     $var wire  8 (# palette_ram(11) [7:0] $end
     $var wire  8 )# palette_ram(12) [7:0] $end
     $var wire  8 *# palette_ram(13) [7:0] $end
     $var wire  8 +# palette_ram(14) [7:0] $end
     $var wire  8 ,# palette_ram(15) [7:0] $end
     $var wire  8 -# palette_ram(16) [7:0] $end
     $var wire  8 .# palette_ram(17) [7:0] $end
     $var wire  8 /# palette_ram(18) [7:0] $end
     $var wire  8 0# palette_ram(19) [7:0] $end
     $var wire  8 }" palette_ram(2) [7:0] $end
     $var wire  8 1# palette_ram(20) [7:0] $end
     $var wire  8 2# palette_ram(21) [7:0] $end
     $var wire  8 3# palette_ram(22) [7:0] $end
     $var wire  8 4# palette_ram(23) [7:0] $end
     $var wire  8 5# palette_ram(24) [7:0] $end
     $var wire  8 6# palette_ram(25) [7:0] $end
     $var wire  8 7# palette_ram(26) [7:0] $end
     $var wire  8 8# palette_ram(27) [7:0] $end
     $var wire  8 9# palette_ram(28) [7:0] $end
     $var wire  8 :# palette_ram(29) [7:0] $end
     $var wire  8 ~" palette_ram(3) [7:0] $end
     $var wire  8 ;# palette_ram(30) [7:0] $end
     $var wire  8 <# palette_ram(31) [7:0] $end
     $var wire  8 !# palette_ram(4) [7:0] $end
     $var wire  8 "# palette_ram(5) [7:0] $end
     $var wire  8 ## palette_ram(6) [7:0] $end
     $var wire  8 $# palette_ram(7) [7:0] $end
     $var wire  8 %# palette_ram(8) [7:0] $end
     $var wire  8 &# palette_ram(9) [7:0] $end
     $var wire  8 n! pattern_byte_0_curr [7:0] $end
     $var wire  8 w! pattern_byte_0_next [7:0] $end
     $var wire  8 o! pattern_byte_1_curr [7:0] $end
     $var wire  8 v! pattern_byte_1_next [7:0] $end
     $var wire  8 C# pipe_0 [7:0] $end
     $var wire  8 D# pipe_1 [7:0] $end
     $var wire  8 E# pipe_2 [7:0] $end
     $var wire  8 F# pipe_3 [7:0] $end
     $var wire  1 L! ppu_address_latch $end
     $var wire 16 X ppu_bg_r_address [15:0] $end
     $var wire  1 '" ppu_increment $end
     $var wire 16 %! ppu_r_addr_d [15:0] $end
     $var wire 16 g ppu_r_addr_q [15:0] $end
     $var wire  1 C ppu_read $end
     $var wire  1 a# pre_render $end
     $var wire  1 K" reset $end
     $var wire  1 O# right $end
     $var wire  1 Q# top $end
     $var wire  1 4" vblank $end
     $var wire 10 ># vert_counter [9:0] $end
     $var wire  1 [" vga_vblank $end
    $upscope $end
    $scope module HD_0 $end
     $var wire 32 j" CLK_Freq [31:0] $end
     $var wire 10 5" CountX [9:0] $end
     $var wire 10 |! CountY [9:0] $end
     $var wire  1 J" Draw_enable $end
     $var wire  1 @" H_sync $end
     $var wire 32 k" I2C_Freq [31:0] $end
     $var wire  1 A" V_sync $end
     $var wire  8 7" byte_lut [7:0] $end
     $var wire  8 2" byte_lut_next [7:0] $end
     $var wire  3 h" byte_num [2:0] $end
     $var wire  1 ?" clk_25 $end
     $var wire  1 8" clk_50 $end
     $var wire  1 J! clk_50k $end
     $var wire 10 I! clk_divide [9:0] $end
     $var wire  8 s data [7:0] $end
     $var wire  1 ~! done $end
     $var wire  1 p! fail $end
     $var wire 32 K! mI2C_CLK_DIV [31:0] $end
     $var wire  1 N! mI2C_CTRL_CLK $end
     $var wire  1 i" read_write $end
     $var wire  1 Q reset $end
     $var wire  1 K" reset_al $end
     $var wire  1 H" scl $end
     $var wire  1 I" sda $end
     $var wire  7 g" slave_address [6:0] $end
     $var wire  1 N" start $end
     $scope module I2C_0 $end
      $var wire 32 n" ACK_NACK_1 [31:0] $end
      $var wire 32 w" ACK_NACK_2 [31:0] $end
      $var wire 32 x" ACK_NACK_3 [31:0] $end
      $var wire 32 z" DELAY [31:0] $end
      $var wire 32 u" DONE_1 [31:0] $end
      $var wire 32 v" DONE_2 [31:0] $end
      $var wire 32 o" FAIL [31:0] $end
      $var wire 32 l" IDLE [31:0] $end
      $var wire 32 m" SEND_1 [31:0] $end
      $var wire 32 s" SEND_2 [31:0] $end
      $var wire 32 t" SEND_3 [31:0] $end
      $var wire 32 p" START_1 [31:0] $end
      $var wire 32 q" START_2 [31:0] $end
      $var wire 32 r" STOP [31:0] $end
      $var wire 32 y" STOP_2 [31:0] $end
      $var wire  1 q! ack $end
      $var wire  1 y! address $end
      $var wire  3 h" byte_num [2:0] $end
      $var wire  3 z! byte_num_local [2:0] $end
      $var wire  1 N! clk_50k $end
      $var wire  4 {! counter [3:0] $end
      $var wire  8 s data [7:0] $end
      $var wire  1 ~! done $end
      $var wire  1 p! fail $end
      $var wire  8 N message [7:0] $end
      $var wire  5 V next_state [4:0] $end
      $var wire  1 i" read_write $end
      $var wire  1 Q reset $end
      $var wire  1 H" scl $end
      $var wire  1 I" sda $end
      $var wire  7 g" slave_address [6:0] $end
      $var wire  1 N" start $end
      $var wire  5 &" state [4:0] $end
     $upscope $end
     $scope module LUT0 $end
      $var wire  8 7" byte_lut [7:0] $end
      $var wire  8 s data_byte [7:0] $end
     $upscope $end
    $upscope $end
    $scope module MEM1 $end
     $var wire  1 8" clk $end
     $var wire 16 y cpu_address [15:0] $end
     $var wire  8 W! mem_data_in [7:0] $end
     $var wire  8 ," mem_data_out [7:0] $end
     $var wire  1 S ppu_mem_rwe $end
     $var wire 16 R ppu_r_address [15:0] $end
     $var wire 16 s! ppu_w_address [15:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


